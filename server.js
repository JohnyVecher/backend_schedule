require('dotenv').config();
const { createClient } = require("@supabase/supabase-js");
const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');
const admin = require('firebase-admin');
const fs = require('fs');

const supabaseUrl = "https://xyfvnuseelbsfmgroqrn.supabase.co";
const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh5ZnZudXNlZWxic2ZtZ3JvcXJuIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0MDMxMDc2OCwiZXhwIjoyMDU1ODg2NzY4fQ.qbGUpC2cZIPpcjXypHx_eDppVO_WnVawWVG5qp6Bso4";
const supabase = createClient(supabaseUrl, process.env.SUPABASE_SERVICE_ROLE_KEY)

const app = express();
app.use(cors());
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_NAME,
    password: process.env.DB_PASSWORD,
    port: process.env.DB_PORT,
    ssl: { rejectUnauthorized: false }
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Firebase Admin SDK
const serviceAccountPath = process.env.GOOGLE_APPLICATION_CREDENTIALS;
if (!fs.existsSync(serviceAccountPath)) {
    console.error("–§–∞–π–ª Firebase Admin SDK –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ –∏ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π GOOGLE_APPLICATION_CREDENTIALS");
    process.exit(1);
}

admin.initializeApp({
  credential: admin.credential.cert(require(process.env.GOOGLE_APPLICATION_CREDENTIALS))
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.get("/", (req, res) => {
    res.send("–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!");
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π
app.get('/api/lessons', async (req, res) => {
    try {
        const { week, day } = req.query;
        const result = await pool.query(
            'SELECT * FROM TE_21B WHERE week_number = $1 AND day_of_week = $2',
            [week, day]
        );
        res.json(result.rows);
    } catch (err) {
        console.error(err);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
});

app.get('/api/lessonste31', async (req, res) => {
    try {
        const { week, day } = req.query;
        const result = await pool.query(
            'SELECT * FROM TE_31B WHERE week_number = $1 AND day_of_week = $2',
            [week, day]
        );
        res.json(result.rows);
    } catch (err) {
        console.error(err);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
});

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø—Ä–∏–≤—è–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥—Ä—É–ø–ø–µ)
app.post('/api/subscribe', async (req, res) => {
    try {
        console.log("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—É—á–µ–Ω:", req.body); // <== –õ–û–ì –í –ö–û–ù–°–û–õ–ò
        const { token, group } = req.body;

        if (!token || !group) {
            return res.status(400).send("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –∏ –≥—Ä—É–ø–ø—É");
        }

        await pool.query(
            'INSERT INTO subscriptions (token, group_name) VALUES ($1, $2) ON CONFLICT (token) DO UPDATE SET group_name = $2',
            [token, group]
        );

        res.status(200).send("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞");
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ:", err);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ');
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∏–Ω–≥ –¥–ª—è Render
const keepAwake = () => {
    setInterval(() => {
        fetch('https://backend-schedule-b6vy.onrender.com')
            .then(() => console.log("–°–µ—Ä–≤–µ—Ä –ø—Ä–æ–±—É–∂–¥–µ–Ω"))
            .catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞:", err));
    }, 20000);
};

keepAwake();

function getDayOfWeekName(dayOfWeek) {
  const days = [
    "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "–í—Ç–æ—Ä–Ω–∏–∫",
    "–°—Ä–µ–¥–∞",  
    "–ß–µ—Ç–≤–µ—Ä–≥", 
    "–ü—è—Ç–Ω–∏—Ü–∞", 
    "–°—É–±–±–æ—Ç–∞",    
  ];

  return days[dayOfWeek] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å";
}

if (!global.isSubscribed) {
  global.isSubscribed = true;
  console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ TE_21B");

  supabase
    .channel("custom-insert-channel")
    .on(
      "postgres_changes",
      { event: "*", schema: "public", table: "te_21b" },
      async (payload) => {
        console.log("üîî –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:", payload);

        const changedDay = payload.new?.day_of_week;
        if (changedDay === undefined || changedDay === null) {
          console.log("‚ùå –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ payload");
          return;
        }

        try {
          const result = await pool.query(
            "SELECT DISTINCT token FROM subscriptions WHERE group_name = $1",
            ["TE21B"]
          );

          const tokens = result.rows.map((row) => row.token);
          console.log("üì≤ –¢–æ–∫–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø—ã TE21B:", tokens);

          if (tokens.length === 0) {
            console.log("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã TE21B");
            return;
          }

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ —Ç–µ–∫—Å—Ç
          const dayName = getDayOfWeekName(changedDay);
          const message = `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ: ${dayName}`;

          // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          const response = await admin.messaging().sendEachForMulticast({
            notification: { title: "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏", body: message },
            tokens,
          });

          console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:", response);
          if (response.failureCount > 0) {
            console.error("‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", response.responses);
          }
        } catch (err) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", err);
        }
      }
    )
    .subscribe();
}

